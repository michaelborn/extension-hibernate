/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5.1/samples
 * This project uses @Incubating APIs which are subject to change.
 */
plugins{
    id 'java'
}
repositories {
    mavenCentral()
}
sourceSets {
    main {
        java {
            srcDirs "source/java/src"
        }
    }
}
dependencies {
    // https://mvnrepository.com/artifact/org.lucee/lucee
    implementation group: 'org.lucee', name: 'lucee', version: '5.3.9.160'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.29.Final'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-ehcache
    implementation group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.4.29.Final'
}

project.ext.buildDate = new Date()

// Serialized to JSON in the MANIFEST.MF output.
HashMap ormEngineConfig = [
    class  : project.mainClassName.toString(),
    name   : project.bundlename.toString(),
    version: project.version.toString()
]


/**
 * @cite https://stackoverflow.com/a/36760102
 */
def getGitBranchName() {
    /**
    * Or possibly get from GHA environment variables
    * (in case only a single commit is checked out in CI.)
    */
    // gitbranch = "$System.env.GITHUB_HEAD_REF"
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

// /hibernate-orm-${bundleversion}${build.number}${versionAppendix}.lex
/**
* @cite https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E56
*/
project.ext.currentBranch = getGitBranchName()
if ( currentBranch == "master" ) {
    project.ext.versionAppendix = "";
} else if ( currentBranch == "development" ) {
    project.ext.versionAppendix = "-SNAPSHOT";
} else {
    project.ext.versionAppendix = "-BETA";
}

/**
 * Read in build number from file.
 * @cite https://stackoverflow.com/a/17370299
 */
def props = new Properties()
file("build.number").withInputStream { 
    stream -> props.load(stream)
}
project.ext.buildnumber = props[ "build.number" ]
project.version = project.version + "." + project.ext.buildnumber + project.ext.versionAppendix


task generateDocs(type: Javadoc) {
  source = sourceSets.main.java
}
/**
 * @cite https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
 */
task toLex(type: Jar){
    from sourceSets.main.java
    archiveExtension  = "lex"
    // archiveBaseName is defined in the gradle properties file
    archiveAppendix = "orm"
    // archiveClassifier = project.versionAppendix

    /**
     * @cite https://stackoverflow.com/a/53912585
     */
    manifest {
        from "source/java/src/META-INF/MANIFEST.MF"
        // TODO: may need to format for Lucee support
        attributes 'Built-Date' : project.ext.buildDate
        attributes 'version' : project.version
        attributes 'id' : project.id
        attributes 'name' : project.label
        attributes 'description' : project.description
        attributes 'start-bundles' : false
        attributes 'release-type' : project.releaseType
        attributes 'orm' : new groovy.json.JsonOutput().toJson( [ ormEngineConfig ] )
        attributes 'lucee-core-version' : project.luceeCoreVersion
    }
}

task fullBuild{
    // dependsOn test
    /**
     * sadly, the docs build fails because it doesn't recognize some Lucee classes.
     * This makes no sense, as they are defined as dependencies and clearly work for the `compileJava` task... ðŸ¤·
     */
    // dependsOn generateDocs
    dependsOn compileJava
    dependsOn build
    dependsOn toLex
}