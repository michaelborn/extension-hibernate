/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5.1/samples
 * This project uses @Incubating APIs which are subject to change.
 */
plugins{
    id 'java'
    id "com.athaydes.osgi-run" version "2.0"
}
repositories {
    mavenCentral()
}
sourceSets {
    main {
        java {
            srcDirs "source/java/src"
        }
    }
    // lucee{
    //     java{
    //         srcDirs = [ "" ]
    //     }
    // }
}
// configurations {
//     lucee

//     // lucee.extendsFrom compileClasspath
//     // lucee.extendsFrom runtimeClasspath
// }
ext {
    luceeVersion = '5.3.10.79-RC'
}
dependencies {

    // https://mvnrepository.com/artifact/org.lucee/lucee
    implementation group: 'org.lucee', name: 'lucee', version: project.ext.luceeVersion

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.29.Final'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-ehcache
    implementation group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.4.29.Final'

    // javax servlet for the ant build class
	implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
	implementation group: 'javax.servlet', name: 'jsp-api', version: '2.0'
	implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
}

ant.importBuild 'script-runner/build-run-cfml.xml'

project.ext.buildDate = new Date()

// Serialized to JSON in the MANIFEST.MF output.
HashMap ormEngineConfig = [
    class  : project.mainClassName.toString(),
    name   : project.bundlename.toString(),
    version: project.version.toString()
]


/**
 * @cite https://stackoverflow.com/a/36760102
 */
def getGitBranchName() {
    /**
    * Or possibly get from GHA environment variables
    * (in case only a single commit is checked out in CI.)
    */
    // gitbranch = "$System.env.GITHUB_HEAD_REF"
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

// /hibernate-orm-${bundleversion}${build.number}${versionAppendix}.lex
/**
* @cite https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E56
*/
project.ext.currentBranch = getGitBranchName()
if ( currentBranch == "master" ) {
    project.ext.versionAppendix = "";
} else if ( currentBranch == "development" ) {
    project.ext.versionAppendix = "-SNAPSHOT";
} else {
    project.ext.versionAppendix = "-BETA";
}

/**
 * Read in build number from file.
 * @cite https://stackoverflow.com/a/17370299
 */
def props = new Properties()
file("build.number").withInputStream { 
    stream -> props.load(stream)
}
project.ext.buildnumber = props[ "build.number" ]
project.version = project.version + "." + project.ext.buildnumber + project.ext.versionAppendix


javadoc {
  source = sourceSets.main.java
}
/**
 * @cite https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html
 */
task lex(type: Jar){
    from sourceSets.main.java
    // from { configurations.lucee }
    archiveExtension  = "lex"
    // archiveBaseName is defined in the gradle properties file
    archiveAppendix = "orm"
    // archiveClassifier = project.versionAppendix

    /**
     * @cite https://stackoverflow.com/a/53912585
     */
    manifest {
        from "source/java/src/META-INF/MANIFEST.MF"
        // TODO: may need to format for Lucee support
        attributes 'Built-Date' : project.ext.buildDate
        attributes 'version' : project.version
        attributes 'id' : project.id
        attributes 'name' : project.label
        attributes 'description' : project.description
        attributes 'start-bundles' : false
        attributes 'release-type' : project.releaseType
        attributes 'orm' : new groovy.json.JsonOutput().toJson( [ ormEngineConfig ] )
        attributes 'lucee-core-version' : project.luceeCoreVersion
    }
}
jar{
    from sourceSets.main.java
    // archiveBaseName is defined in the gradle properties file
    archiveAppendix = "orm"
    // archiveClassifier = project.versionAppendix

    /**
     * TODO: Reuse all these from the `lex` config.
     * @cite https://stackoverflow.com/a/53912585
     */
    manifest {
        from "source/java/src/META-INF/MANIFEST.MF"
        // TODO: may need to format for Lucee support
        attributes 'Built-Date' : project.ext.buildDate
        attributes 'version' : project.version
        attributes 'id' : project.id
        attributes 'name' : project.label
        attributes 'description' : project.description
        attributes 'start-bundles' : false
        attributes 'release-type' : project.releaseType
        attributes 'orm' : new groovy.json.JsonOutput().toJson( [ ormEngineConfig ] )
        attributes 'lucee-core-version' : project.luceeCoreVersion
        /**
         * Fixes "no main manifest attribute" error.
         * Only needed in the .jar manifest.
         * @cite https://stackoverflow.com/a/9689877
         */
        attributes 'Main-Class' : 'org.lucee.extension.orm.hibernate.Main'
    }
}

/**
 * @cite https://www.baeldung.com/gradle-fat-jar#creating-a-separate-task
 */
task luceeJar( type: Jar){
    archiveAppendix = "all"

    include "lucee/**"

    manifest{
        attributes 'Main-Class' : 'lucee.runtime.script.Main'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    /**
     * @cite https://www.baeldung.com/gradle-fat-jar#using-the-jar-task-from-the-java-plugin
     */
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

/**
 * @cite https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html#org.gradle.api.tasks.JavaExec:jvmArgs
 */
task runCFTests(type: JavaExec) {
    // Executable jars can have only _one_ jar on the classpath.
    // classpath = files(tasks.jar)

    // 'main' does not need to be specified
    "ant all".execute();

    // arguments to pass to the application
    // args 'appArg1'
    jvmArgs 'Dlucee.base.dir'        : '${temp}/lucee'
    jvmArgs 'Dlucee.web.dir'         : '${temp}/lucee/web'
    jvmArgs 'Dwebroot'               : '${webroot}'
    jvmArgs 'Dexecute'               : '${execute}'
    jvmArgs 'DexecuteScriptByInclude': '${executeScriptByInclude}'
    jvmArgs 'DextensionDir'          : '${extensionDir}'
    jvmArgs 'Dlucee.extensions'      : '${extensions}'
    jvmArgs 'Dlucee.mapping.first'   : 'true'
    /*
    'Xdebug'
    'Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000'
    'Djava.net.useSystemProxies=true'
    'Dhttps.proxyHost=127.0.0.1'
    'Dhttps.proxyPort=8188'
    'Dhttp.proxyHost=127.0.0.1'
    'Dhttp.proxyPort=8188'
    */
    // ant -buildfile ${{ github.action_path }}/build.xml -DluceeVersion="${{ inputs.luceeVersion }}" -Dwebroot="${{ inputs.webroot }}" -Dexecute="${{ inputs.execute }}" -Dextensions="${{ inputs.extensions }}" -DextensionDir="${{ inputs.extensionDir }}"
    // ant[ "testCFML" ]();
    // imported from lucee/script-runner
    // dependsOn testCFML
    // imported from lucee/script-runner
    dependsOn all
}

// task tryRunningLuceeTests( type: JavaExec){
//     // Executable jars can have only _one_ jar on the classpath.
//     // UGH, how to get the full lucee jar into the class path?
//     // println "Classpath = ${sourceSets.main.compileClasspath.asPath}";
//     // configurations.lucee.each { File file -> println file.name }
//     classpath = files( "lucee-${project.ext.luceeVersion}.jar" )

//     // lucee-5.3.10.79-RC.jar
//     mainClass = 'lucee.runtime.script.Main'
// }

task runWithJavaExec(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = files( "lucee-${project.ext.luceeVersion}.jar" )
    mainClass = 'org.lucee.runtime.script.Main'

    // classpath.each { File file -> println file.name }
}

// task luceeJar( type: Jar){
//         sourceSets.main.compileClasspath.collect { it.name LIKE 'org.lucee/lucee/' }
//     from { 
//     }
// }
task runWithExec(type: Exec) {
    dependsOn build
    group = "Execution"
    description = "Run the main class with ExecTask"

    // <classpath path="${java.class.path}">
    //     <pathelement location="${cache}/lucee-${luceeVersion}.jar"/>
    //     <pathelement path="${runtime_classpath}"/>
    // </classpath>
    // <arg value="-f"/>
    // <arg value="../../build-run-cfml.xml"/>
    // <jvmarg value="-Dlucee.base.dir=${temp}/lucee"/>
    // <jvmarg value="-Dlucee.web.dir=${temp}/lucee/web"/>
    // <jvmarg value="-Dwebroot=${webroot}"/>
    // <jvmarg value="-Dexecute=${execute}"/>
    // <jvmarg value="-DexecuteScriptByInclude=${executeScriptByInclude}"/>
    // <jvmarg value="-DextensionDir=${extensionDir}"/>
    // <jvmarg value="-Dlucee.extensions=${extensions}"/>
    // <jvmarg value="-Dlucee.mapping.first=true"/>
    // DEBUG STUFF
    // <jvmarg value="-Xdebug"/>
    // <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"/>
    // <jvmarg value="-Djava.net.useSystemProxies=true"/>
    // <jvmarg value="-Dhttps.proxyHost=127.0.0.1"/>
    // <jvmarg value="-Dhttps.proxyPort=8188"/>
    // <jvmarg value="-Dhttp.proxyHost=127.0.0.1"/>
    // <jvmarg value="-Dhttp.proxyPort=8188"/>
    commandLine "java", "-classpath", "lucee-${project.ext.luceeVersion}.jar", 'lucee.runtime.script.Main'
}

build{
    dependsOn compileJava
    dependsOn jar
    dependsOn lex

    // dependsOn test
    // dependsOn tryRunningLuceeTests
    /**
     * sadly, the docs build fails because it doesn't recognize some Lucee classes.
     * This makes no sense, as they are defined as dependencies and clearly work for the `compileJava` task... ðŸ¤·
     */
    dependsOn javadoc
}